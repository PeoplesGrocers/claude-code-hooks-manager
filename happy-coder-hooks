#!/usr/bin/env python3
import json
import sys
import os
from datetime import datetime

def log_hook_call(event_name, data):
    """Log hook calls to a file for debugging"""
    log_dir = os.path.expanduser("~/.happy-coder-hooks")
    os.makedirs(log_dir, exist_ok=True)
    
    log_file = os.path.join(log_dir, "hooks.log")
    timestamp = datetime.now().isoformat()
    
    with open(log_file, "a") as f:
        f.write(f"[{timestamp}] Event: {event_name}\n")
        f.write(f"Data: {json.dumps(data, indent=2)}\n")
        f.write("-" * 80 + "\n")

def main():
    if len(sys.argv) < 2:
        print("Error: EventName argument required", file=sys.stderr)
        sys.exit(1)
    
    event_name = sys.argv[1]
    
    # Read JSON input from stdin
    try:
        input_data = json.load(sys.stdin)
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON input: {e}", file=sys.stderr)
        sys.exit(1)
    
    # Log the hook call
    log_hook_call(event_name, input_data)
    
    # Handle different event types
    if event_name == "PreToolUse":
        tool_name = input_data.get("tool_name", "")
        tool_input = input_data.get("tool_input", {})
        
        # Example: Block dangerous commands
        if tool_name == "Bash":
            command = tool_input.get("command", "")
            if "rm -rf /" in command:
                print("Dangerous command blocked!", file=sys.stderr)
                sys.exit(2)  # Exit code 2 blocks the tool call
        
        # Log tool usage
        print(f"PreToolUse: {tool_name} called")
        
    elif event_name == "PostToolUse":
        tool_name = input_data.get("tool_name", "")
        print(f"PostToolUse: {tool_name} completed")
        
    elif event_name == "UserPromptSubmit":
        prompt = input_data.get("prompt", "")
        print(f"UserPromptSubmit: Processing prompt of length {len(prompt)}")
        
    elif event_name == "Notification":
        message = input_data.get("message", "")
        print(f"Notification: {message}")
        
    elif event_name in ["Stop", "SubagentStop"]:
        print(f"{event_name}: Claude finished responding")
        
    elif event_name == "PreCompact":
        trigger = input_data.get("trigger", "")
        print(f"PreCompact: Triggered by {trigger}")
        
    else:
        print(f"Unknown event: {event_name}")
    
    # Success
    sys.exit(0)

if __name__ == "__main__":
    main()